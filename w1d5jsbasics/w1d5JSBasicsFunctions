// JavaScript source code

// Max of two
function max(one, two) {
    if (one >= two) {
        return one;
    }
    return two;
}

console.log(max(1, 2))

// Max of three
function maxOfThree(one, two, three) {
    let firstMax = max(one, two);
    if (firstMax >= three) {
        return firstMax; 
    }
    return three;

}

// isVowel function
function isVowel(areUaVowel) {
    let vowels = ["a", "e", "i", "o", "u", "y"];
    let test = false;
    for (let i = 0; i < vowels.length; i++){
        if (areUaVowel === vowels[i]) {
            test = true;
            break;
            
        }
    }
    return test;

}

// sum using reduce
let anArray = [1, 2, 3, 4];
const sum = anArray.reduce(function (accumulator, elem) {
    return accumulator + elem;
}, 0);

// product using reduce
const multiply = anArray.reduce(function (acc, item) {
    return acc * item;
}, 1);

// reverse a string
function reverse(s) {
    let reversed = "";
    for (let i = (s.length - 1); i >= 0; i--) {
        reversed += s[i];
    }

    return reversed;
}

// The longest word
function findLongestWord(arrayOfWords) {
    let theLongestWord = arrayOfWords[0];
    for (let i = 1; i < arrayOfWords.length; i++){
        if (theLongestWord.length < arrayOfWords[i].length) {
            theLongestWord = arrayOfWords[i];
        }
    }
    return theLongestWord;
}
//Write a function filterLongWords() that takes an array of words and 
//an integer i and returns the array of words that are longer than i
function filterLongWords(arrayOfWords, i) {
    let resultArray = [];
    for (let j = 0; j < arrayOfWords.length; j++){
        if (arrayOfWords[j].length > i) {
            resultArray.unshift(arrayOfWords[j]);
        }
    }

    return resultArray;
}

//multiply each element by 10;
const a = [1, 3, 5, 3, 3];
const b = a.map(function (elem, array) {
    return elem * 10;
})

//return array with all elements equal to 3; 
const c = a.filter(function (elem, array) {
    return elem === 3;
});

const d = a.reduce(function (item, accumulator) {
    return accumulator * item;    
}, 1);
